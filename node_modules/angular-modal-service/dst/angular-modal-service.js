!function(e){var n={};function o(t){if(n[t])return n[t].exports;var l=n[t]={i:t,l:!1,exports:{}};return e[t].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var l in e)o.d(t,l,function(n){return e[n]}.bind(null,l));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=0)}([function(e,n,o){"use strict";angular.module("angularModalService",[]).factory("ModalService",["$animate","$document","$compile","$controller","$http","$rootScope","$q","$templateRequest","$timeout",function(e,n,o,t,l,r,c,u,a){return new function(){var l=this;l.openModals=[];var s=function(n,o){var t=n.children();return t.length>0?e.enter(o,n,t[t.length-1]):e.enter(o,n)};l.closeModals=function(e,n){for(;l.openModals.length;)l.openModals[0].close(e,n),l.openModals.splice(0,1)},l.showModal=function(i){var p=angular.element(n[0].body),d=c.defer();return i.controller?(function(e,n){var o=c.defer();return e?o.resolve(e):n?u(n,!0).then(function(e){o.resolve(e)},function(e){o.reject(e)}):o.reject("No template or templateUrl has been specified."),o.promise}(i.template,i.templateUrl).then(function(n){var u={},f=(i.scope||r).$new(),m=null,v=i.locationChangeSuccess;!1===v?m=angular.noop:angular.isNumber(v)&&v>=0?a(function(){m=r.$on("$locationChangeSuccess",S)},v):m=r.$on("$locationChangeSuccess",S);var b=c.defer(),g=c.defer(),y=!1,h={$scope:f,close:function(e,n){"function"==typeof i.preClose&&i.preClose(u,e,n),void 0!==n&&null!==n||(n=0),y||(y=!0,a(function(){S(e)},n))}};i.inputs&&angular.extend(h,i.inputs);var $=o(n)(f);h.$element=$;var M=f[i.controllerAs],j=t(i.controller,h,!1,i.controllerAs);function S(n){b.resolve(n),i.bodyClass&&p[0].classList.remove(i.bodyClass),e.leave($).then(function(){if($){g.resolve(n),f.$destroy();for(var e=0;e<l.openModals.length;e++)if(l.openModals[e].modal===u){l.openModals.splice(e,1);break}h.close=null,d=null,b=null,u=null,h=null,$=null,f=null}}),m&&m()}i.controllerAs&&M&&angular.extend(j,M),i.appendElement?s(i.appendElement,$):s(p,$),i.bodyClass&&p[0].classList.add(i.bodyClass),u.controller=j,u.scope=f,u.element=$,u.close=b.promise,u.closed=g.promise,d.resolve(u),document.activeElement.blur(),l.openModals.push({modal:u,close:h.close})}).then(null,function(e){d.reject(e)}),d.promise):(d.reject("No controller has been specified."),d.promise)}}}])}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,